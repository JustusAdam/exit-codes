{-|
Module      : $Header$
Description : BSD exit codes exposed to Haskell
Copyright   : (c) Justus Adam, 2015 - 2018
License     : BSD-3
Maintainer  : dev@justus.science
Stability   : experimental
Portability : POSIX

These are Haskell values generated by the C pre processor which expose exit
codes as defined by the BSD project in "sysexits.h".

Please note that the values shown in the documentation are also inserted by the
preprocessor and thus technically only valid for the platform this documentation
was built on.

As may be evident from the structure here both the integer value for the exit
code as well as the 'ExitCode' value (to be used with 'exitWith') are exposed.

The format for a given code is:

[EX_ERRORNAME] Error code CPP macro as defined by the @sysexits.h@ header
[exErrorName] 'Int' value for the error
[codeErrorName] 'ExitCode' value for the error
-}
{-# LANGUAGE CPP #-}
module System.Exit.Codes
  ( exOk          , codeOk
  , exUsage       , codeUsage
  , exDataErr     , codeDataErr
  , exNoInput     , codeNoInput
  , exNoUser      , codeNoUser
  , exNoHost      , codeNoHost
  , exUnavailable , codeUnavaiable
  , exSoftware    , codeSoftware
  , exOsErr       , codeOsErr
  , exOsFile      , codeOsFile
  , exCantCreate  , codeCantCreate
  , exIOErr       , codeIOErr
  , exTempFail    , codeTempFail
  , exProtocol    , codeProtocol
  , exNoPerm      , codeNoPerm
  , exConfig      , codeConfig

  -- * Bounds
  , exBase, exMax
  ) where

import System.Exit

#include <sysexits.h>

-- | successful termination (EX_OK)
exOk :: Int
exOk = EX_OK

-- | successful termination (EX_OK)
codeOk :: ExitCode
codeOk = ExitSuccess

-- | base value for error messages (EX__BASE)
exBase :: Int
exBase = EX__BASE

-- | command line usage error (EX_USAGE)
exUsage :: Int
exUsage = EX_USAGE

-- | command line usage error (EX_USAGE)
codeUsage :: ExitCode
codeUsage = ExitFailure exUsage

-- | data format error (EX_DATAERR)
exDataErr :: Int
exDataErr = EX_DATAERR

-- | data format error (EX_DATAERR)
codeDataErr :: ExitCode
codeDataErr = ExitFailure exDataErr

-- | cannot open input (EX_NOINPUT)
exNoInput :: Int
exNoInput = EX_NOINPUT

-- | cannot open input (EX_NOINPUT)
codeNoInput :: ExitCode
codeNoInput = ExitFailure exNoInput

-- | addressee unknown (EX_NOUSER)
exNoUser :: Int
exNoUser = EX_NOUSER

-- | addressee unknown (EX_NOUSER)
codeNoUser :: ExitCode
codeNoUser = ExitFailure exNoUser

-- | host name unknown (EX_NOHOST)
exNoHost :: Int
exNoHost = EX_NOHOST

-- | host name unknown (EX_NOHOST)
codeNoHost :: ExitCode
codeNoHost = ExitFailure exNoHost

-- | service unavailable (EX_UNAVAILABLE)
exUnavailable :: Int
exUnavailable = EX_UNAVAILABLE

-- | service unavailable (EX_UNAVAILABLE)
codeUnavaiable :: ExitCode
codeUnavaiable = ExitFailure exUnavailable

-- | internal software error (EX_SOFTWARE)
exSoftware :: Int
exSoftware = EX_SOFTWARE

-- | internal software error (EX_SOFTWARE)
codeSoftware :: ExitCode
codeSoftware = ExitFailure exSoftware

-- | system error (e.g., can't fork)
-- (EX_OSERR)
exOsErr :: Int
exOsErr =  EX_OSERR

-- | system error (e.g., can't fork)
-- (EX_OSERR)
codeOsErr :: ExitCode
codeOsErr = ExitFailure exOsErr

-- | critical OS file missing (EX_OSFILE)
exOsFile :: Int
exOsFile = EX_OSFILE

-- | critical OS file missing (EX_OSFILE)
codeOsFile :: ExitCode
codeOsFile = ExitFailure exOsFile

-- | can't create (user) output file
-- (EX_CANTCREAT)
exCantCreate :: Int
exCantCreate = EX_CANTCREAT

-- | can't create (user) output file
-- (EX_CANTCREAT)
codeCantCreate :: ExitCode
codeCantCreate = ExitFailure exCantCreate

-- | input/output error (EX_IOERR)
exIOErr :: Int
exIOErr =  EX_IOERR

-- | input/output error (EX_IOERR)
codeIOErr :: ExitCode
codeIOErr = ExitFailure exIOErr

-- | temp failure; user is invited to retry (EX_TEMPFAIL)
exTempFail :: Int
exTempFail = EX_TEMPFAIL

-- | temp failure; user is invited to retry (EX_TEMPFAIL)
codeTempFail :: ExitCode
codeTempFail = ExitFailure exTempFail

-- | remote error in protocol (EX_PROTOCOL)
exProtocol :: Int
exProtocol = EX_PROTOCOL

-- | remote error in protocol (EX_PROTOCOL)
codeProtocol :: ExitCode
codeProtocol = ExitFailure exProtocol

-- | permission denied (EX_NOPERM)
exNoPerm :: Int
exNoPerm = EX_NOPERM

-- | permission denied (EX_NOPERM)
codeNoPerm :: ExitCode
codeNoPerm = ExitFailure exNoPerm

-- | configuration error (EX_CONFIG)
exConfig :: Int
exConfig = EX_CONFIG

-- | configuration error (EX_CONFIG)
codeConfig :: ExitCode
codeConfig = ExitFailure exConfig

-- | maximum listed value (EX__MAX)
exMax :: Int
exMax = EX__MAX
